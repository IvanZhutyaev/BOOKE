// Game Tasks Panel Handlers
document.addEventListener('DOMContentLoaded', () => {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é isAnyPanelOpen
    if (window.isAnyPanelOpen) {
        const originalFunction = window.isAnyPanelOpen;
        window.isAnyPanelOpen = function() {
            const panels = [
                'shop-panel',
                'characters-panel', 
                'city-panel',
                'tasks-panel',
                'profile-panel',
                'friends-panel',
                'inventory-panel',
                'game-tasks-panel'
            ];
            
            return panels.some(panelId => {
                const panel = document.getElementById(panelId);
                return panel && panel.style.display !== 'none';
            });
        };
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const gameTasksClose = document.getElementById('game-tasks-close');
    const gameTasksPanel = document.getElementById('game-tasks-panel');
    if (gameTasksClose && gameTasksPanel) {
        gameTasksClose.addEventListener('click', () => {
            if (window.hidePanelWithAnimation) {
                window.hidePanelWithAnimation('game-tasks-panel', () => {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
                    if (window.clearActiveSideButton) {
                        window.clearActiveSideButton();
                    }
                });
            } else {
            gameTasksPanel.style.display = 'none';
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–Ω–æ–ø–∫–∏
                if (window.clearActiveSideButton) {
                    window.clearActiveSideButton();
                }
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã"
    const btnGetAllRewards = document.getElementById('btn-get-all-rewards');
    if (btnGetAllRewards) {
        btnGetAllRewards.addEventListener('click', () => {
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥
            const totalReward = calculateTotalReward();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
            if (totalReward === '0') {
                alert('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è!');
                return;
            }
            
            // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            const currentBalance = window.getBalance ? window.getBalance() : parseFloat(localStorage.getItem('balance') || '100');
            const rewardValue = totalReward.includes('k') 
                ? parseInt(totalReward.replace('k', '')) * 1000 
                : parseInt(totalReward);
            const newBalance = currentBalance + rewardValue;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            if (window.setBalance) {
                window.setBalance(newBalance);
            } else {
                localStorage.setItem('balance', newBalance);
                const moneyAmount = document.getElementById('money-amount');
                if (moneyAmount) {
                    moneyAmount.textContent = window.formatNumber ? window.formatNumber(newBalance) : newBalance;
                }
            }
            
            alert(`–ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã! +${totalReward} üí∞`);
            
            // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ
            const gameTasks = getGameTasksData();
            gameTasks.forEach(task => {
                const isCompleted = localStorage.getItem(`task_completed_${task.id}`) === 'true';
                const isClaimed = localStorage.getItem(`task_claimed_${task.id}`) === 'true';
                
                if (isCompleted && !isClaimed) {
                    localStorage.setItem(`task_claimed_${task.id}`, 'true');
                }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            renderGameTasks();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            const tasks = getGameTasksData();
            updateTaskCounters(tasks);
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    renderGameTasks();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
    setInterval(checkTasksCompletion, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
});

// –°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
const TASK_KEYS = {
    EARN_100: 'task_earn_100',
    EARN_300: 'task_earn_300', 
    EARN_500: 'task_earn_500',
    HIRE_REGGI: 'task_hire_reggi',
    BUY_SOFA: 'task_buy_sofa',
    PRINT_BOOK: 'task_print_book'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Å —É—á–µ—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function getGameTasksData() {
    const currentBalance = window.getBalance ? window.getBalance() : parseFloat(localStorage.getItem('balance') || '100');
    const hasReggi = localStorage.getItem('hasReggi') === 'true';
    const hasSofa = localStorage.getItem('hasSofa') === 'true';
    const hasPrintedBook = localStorage.getItem('hasPrintedBook') === 'true';
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const earn100Progress = parseFloat(localStorage.getItem('task_progress_earn_100') || '0');
    const earn300Progress = parseFloat(localStorage.getItem('task_progress_earn_300') || '0');
    const earn500Progress = parseFloat(localStorage.getItem('task_progress_earn_500') || '0');
    
    return [
        {
            id: TASK_KEYS.EARN_100,
            title: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100$',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã',
            reward: '35k',
            progress: Math.min(currentBalance, 100),
            target: 100,
            status: getTaskStatus(TASK_KEYS.EARN_100, currentBalance >= 100)
        },
        {
            id: TASK_KEYS.EARN_300,
            title: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 300$',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 300 –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã',
            reward: '75k',
            progress: Math.min(currentBalance, 300),
            target: 300,
            status: getTaskStatus(TASK_KEYS.EARN_300, currentBalance >= 300)
        },
        {
            id: TASK_KEYS.HIRE_REGGI,
            title: '–ù–∞–Ω—è—Ç—å –†–µ–¥–∂–∏',
            description: '–ù–∞–π–º–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –†–µ–¥–∂–∏ –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É',
            reward: '50k',
            progress: hasReggi ? 1 : 0,
            target: 1,
            status: getTaskStatus(TASK_KEYS.HIRE_REGGI, hasReggi)
        },
        {
            id: TASK_KEYS.BUY_SOFA,
            title: '–ö—É–ø–∏—Ç—å –¥–∏–≤–∞–Ω',
            description: '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –¥–∏–≤–∞–Ω –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–º—Ñ–æ—Ä—Ç–∞',
            reward: '5k',
            progress: hasSofa ? 1 : 0,
            target: 1,
            status: getTaskStatus(TASK_KEYS.BUY_SOFA, hasSofa)
        },
        {
            id: TASK_KEYS.PRINT_BOOK,
            title: '–ù–∞–ø–µ—á–∞—Ç–∞—Ç—å –∫–Ω–∏–≥—É',
            description: '–°–æ–∑–¥–∞–π—Ç–µ –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–Ω–∏–≥—É',
            reward: '105k',
            progress: hasPrintedBook ? 1 : 0,
            target: 1,
            status: getTaskStatus(TASK_KEYS.PRINT_BOOK, hasPrintedBook)
        },
        {
            id: TASK_KEYS.EARN_500,
            title: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 500$',
            description: '–ù–∞–∫–æ–ø–∏—Ç–µ 500 –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã',
            reward: '305k',
            progress: Math.min(currentBalance, 500),
            target: 500,
            status: getTaskStatus(TASK_KEYS.EARN_500, currentBalance >= 500)
        }
    ];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
function getTaskStatus(taskKey, isCompleted) {
    const wasClaimed = localStorage.getItem(`task_claimed_${taskKey}`) === 'true';
    const wasCompleted = localStorage.getItem(`task_completed_${taskKey}`) === 'true';
    
    if (wasClaimed) return 'claimed';
    if (wasCompleted) return 'completed';
    if (isCompleted) return 'completed';
    return 'pending';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
function checkTasksCompletion() {
    const currentBalance = window.getBalance ? window.getBalance() : parseFloat(localStorage.getItem('balance') || '100');
    const hasReggi = localStorage.getItem('hasReggi') === 'true';
    const hasSofa = localStorage.getItem('hasSofa') === 'true';
    const hasPrintedBook = localStorage.getItem('hasPrintedBook') === 'true';
    
    let hasUpdates = false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω–µ–∂–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if (currentBalance >= 100 && localStorage.getItem(`task_completed_${TASK_KEYS.EARN_100}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.EARN_100}`, 'true');
        hasUpdates = true;
    }
    
    if (currentBalance >= 300 && localStorage.getItem(`task_completed_${TASK_KEYS.EARN_300}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.EARN_300}`, 'true');
        hasUpdates = true;
    }
    
    if (currentBalance >= 500 && localStorage.getItem(`task_completed_${TASK_KEYS.EARN_500}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.EARN_500}`, 'true');
        hasUpdates = true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    if (hasReggi && localStorage.getItem(`task_completed_${TASK_KEYS.HIRE_REGGI}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.HIRE_REGGI}`, 'true');
        hasUpdates = true;
    }
    
    if (hasSofa && localStorage.getItem(`task_completed_${TASK_KEYS.BUY_SOFA}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.BUY_SOFA}`, 'true');
        hasUpdates = true;
    }
    
    if (hasPrintedBook && localStorage.getItem(`task_completed_${TASK_KEYS.PRINT_BOOK}`) !== 'true') {
        localStorage.setItem(`task_completed_${TASK_KEYS.PRINT_BOOK}`, 'true');
        hasUpdates = true;
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞–Ω–∏–π
    if (hasUpdates) {
        renderGameTasks();
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
        const tasks = getGameTasksData();
        updateTaskCounters(tasks);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ
function markTaskAsCompleted(taskId) {
    localStorage.setItem(`task_completed_${taskId}`, 'true');
    renderGameTasks();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    const tasks = getGameTasksData();
    updateTaskCounters(tasks);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ
function markTaskAsClaimed(taskId) {
    localStorage.setItem(`task_claimed_${taskId}`, 'true');
    renderGameTasks();
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    const tasks = getGameTasksData();
    updateTaskCounters(tasks);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏–≥—Ä–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
function renderGameTasks() {
    const container = document.getElementById('game-tasks-list');
    if (!container) return;
    
    container.innerHTML = '';
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏–π
    const gameTasks = getGameTasksData();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    updateTaskCounters(gameTasks);
    
    gameTasks.forEach(task => {
        const taskDiv = document.createElement('div');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
        const backgroundColor = '#5a5a5a';
        taskDiv.style.cssText = `display:flex;align-items:center;background:${backgroundColor};border-radius:8px;padding:12px;gap:12px;min-height:80px;`;
        
        const statusText = task.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' : 
                          task.status === 'claimed' ? '–ü–æ–ª—É—á–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
        const statusColor = task.status === 'completed' ? '#4caf50' : 
                           task.status === 'claimed' ? '#4caf50' : '#fff';
        const statusStyle = task.status === 'completed' || task.status === 'claimed'
            ? 'background:#4caf50;color:#fff;padding:4px 8px;border-radius:4px;text-align:center;'
            : 'background:#666;color:#fff;padding:4px 8px;border-radius:4px;text-align:center;';
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏
        const centerContent = `
            <div style="display:flex;flex-direction:column;gap:4px;flex:1;">
                <span style="font-size:14px;font-weight:600;color:#fff;">${task.title}</span>
                <span style="font-size:12px;color:#ccc;">${task.description}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –í–°–ï–• –∑–∞–¥–∞–Ω–∏–π (–¥–∞–∂–µ —Å target=1)
        let progressBar = '';
        if (task.target > 1) {
            const progressPercent = Math.min(100, (task.progress / task.target) * 100);
            progressBar = `
                <div style="background:#2b2b2b;border-radius:4px;height:4px;margin-top:4px;overflow:hidden;">
                    <div style="height:100%;background:#4caf50;width:${progressPercent}%;transition:width 0.3s ease;"></div>
                </div>
                <div style="font-size:10px;color:#ccc;margin-top:2px;">${task.progress}/${task.target}</div>
            `;
        } else {
            // –î–ª—è –∑–∞–¥–∞–Ω–∏–π —Å target=1 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const isDone = task.progress >= task.target;
            progressBar = `
                <div style="background:#2b2b2b;border-radius:4px;height:4px;margin-top:4px;overflow:hidden;">
                    <div style="height:100%;background:${isDone ? '#4caf50' : '#666'};width:${isDone ? '100' : '0'}%;transition:width 0.3s ease;"></div>
                </div>
                <div style="font-size:10px;color:#ccc;margin-top:2px;">${isDone ? '1/1' : '0/1'}</div>
            `;
        }
        
        taskDiv.innerHTML = `
            <div style="color:${statusColor};font-size:12px;font-weight:600;min-width:60px;${statusStyle}">
                ${task.status === 'completed' ? '‚úì' : task.status === 'claimed' ? '‚úì' : statusText}
            </div>
            ${centerContent}
            <div style="display:flex;flex-direction:column;align-items:flex-end;gap:4px;min-width:80px;">
                <button class="game-task-reward-btn" style="background:#666;border:none;color:#fff;border-radius:6px;padding:6px 10px;font-size:12px;font-weight:600;cursor:pointer;display:flex;align-items:center;gap:4px;${task.status === 'claimed' ? 'opacity:0.5;cursor:not-allowed;' : ''}">
                    <span style="font-size:10px;">üí∞</span>
                    +${task.reward}
                </button>
                ${progressBar}
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        const rewardBtn = taskDiv.querySelector('.game-task-reward-btn');
        rewardBtn.addEventListener('click', () => {
            if (task.status === 'claimed') {
                // –£–∂–µ –ø–æ–ª—É—á–µ–Ω–æ
                return;
            }
            if (task.status === 'pending') {
                // –ï—â–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                return;
            }
            if (task.status === 'completed') {
                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏ –¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
                markTaskAsClaimed(task.id);
                
                // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                const rewardValue = task.reward.includes('k') 
                    ? parseInt(task.reward.replace('k', '')) * 1000 
                    : parseInt(task.reward);
                const currentBalance = window.getBalance ? window.getBalance() : parseFloat(localStorage.getItem('balance') || '100');
                const newBalance = currentBalance + rewardValue;
                
                if (window.setBalance) {
                    window.setBalance(newBalance);
                } else {
                    localStorage.setItem('balance', newBalance);
                    const moneyAmount = document.getElementById('money-amount');
                    if (moneyAmount) {
                        moneyAmount.textContent = window.formatNumber ? window.formatNumber(newBalance) : newBalance;
                    }
                }
                
                alert(`–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +${task.reward} üí∞`);
            }
        });
        
        container.appendChild(taskDiv);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥ –≤ –∫–Ω–æ–ø–∫–µ
    updateTotalReward();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞–Ω–∏–π
function updateTaskCounters(tasks) {
    const completedCount = tasks.filter(task => task.status === 'completed' || task.status === 'claimed').length;
    const totalCount = tasks.length;
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å font-size:32px –≤ –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞–Ω–∏–π
    const gameTasksPanel = document.getElementById('game-tasks-panel');
    if (gameTasksPanel) {
        const counters = gameTasksPanel.querySelectorAll('div[style*="font-size:32px"]');
        
        // –ü–µ—Ä–≤—ã–π —Å—á–µ—Ç—á–∏–∫ - –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        if (counters[0]) {
            counters[0].textContent = completedCount;
        }
        
        // –í—Ç–æ—Ä–æ–π —Å—á–µ—Ç—á–∏–∫ - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞–Ω–∏–π
        if (counters[1]) {
            counters[1].textContent = totalCount;
        }
    }
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–π
window.renderGameTasks = renderGameTasks;
window.calculateTotalReward = calculateTotalReward;
window.updateTotalReward = updateTotalReward;
window.markCompletedTasksAsClaimed = markCompletedTasksAsClaimed;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
window.markTaskAsCompleted = markTaskAsCompleted;
window.markTaskAsClaimed = markTaskAsClaimed;
window.checkTasksCompletion = checkTasksCompletion;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
window.onMoneyEarned = function(amount) {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ–Ω–µ–≥
    checkTasksCompletion();
};

window.onReggiHired = function() {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–π–º–µ –†–µ–¥–∂–∏
    localStorage.setItem('hasReggi', 'true');
    markTaskAsCompleted(TASK_KEYS.HIRE_REGGI);
};

window.onSofaBought = function() {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–∏–≤–∞–Ω–∞
    localStorage.setItem('hasSofa', 'true');
    markTaskAsCompleted(TASK_KEYS.BUY_SOFA);
};

window.onBookPrinted = function() {
    // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—á–∞—Ç–∏ –∫–Ω–∏–≥–∏
    localStorage.setItem('hasPrintedBook', 'true');
    markTaskAsCompleted(TASK_KEYS.PRINT_BOOK);
};

// –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
window.testTaskSystem = {
    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
    resetAll: function() {
        Object.values(TASK_KEYS).forEach(key => {
            localStorage.removeItem(`task_completed_${key}`);
            localStorage.removeItem(`task_claimed_${key}`);
        });
        localStorage.removeItem('hasReggi');
        localStorage.removeItem('hasSofa');
        localStorage.removeItem('hasPrintedBook');
        localStorage.removeItem('gameTasksRewardsClaimed');
        renderGameTasks();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const tasks = getGameTasksData();
        updateTaskCounters(tasks);
        alert('–í—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã!');
    },
    
    // –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
    completeAll: function() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if (window.setBalance) {
            window.setBalance(1000); // –ë–æ–ª—å—à–µ 500 –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        }
        
        // –û—Ç–º–µ—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        localStorage.setItem('hasReggi', 'true');
        localStorage.setItem('hasSofa', 'true');
        localStorage.setItem('hasPrintedBook', 'true');
        
        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        Object.values(TASK_KEYS).forEach(key => {
            localStorage.setItem(`task_completed_${key}`, 'true');
        });
        
        renderGameTasks();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const tasks = getGameTasksData();
        updateTaskCounters(tasks);
        alert('–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
    },
    
    // –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–≥—Ä–∞–¥
    claimAll: function() {
        Object.values(TASK_KEYS).forEach(key => {
            localStorage.setItem(`task_claimed_${key}`, 'true');
        });
        renderGameTasks();
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        const tasks = getGameTasksData();
        updateTaskCounters(tasks);
        alert('–í—Å–µ –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—É—á–µ–Ω—ã!');
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥
function calculateTotalReward() {
    const gameTasks = getGameTasksData();
    
    let total = 0;
    gameTasks.forEach(task => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ
        const isCompleted = localStorage.getItem(`task_completed_${task.id}`) === 'true';
        const isClaimed = localStorage.getItem(`task_claimed_${task.id}`) === 'true';
        
        if (isCompleted && !isClaimed) {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞ (—É–±–∏—Ä–∞–µ–º 'k' –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000)
            const rewardValue = task.reward.includes('k') 
                ? parseInt(task.reward.replace('k', '')) * 1000 
                : parseInt(task.reward);
            total += rewardValue;
        }
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç —Å 'k'
    return total >= 1000 ? `${Math.floor(total / 1000)}k` : total.toString();
} 

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É–º–º—ã –Ω–∞–≥—Ä–∞–¥ –≤ –∫–Ω–æ–ø–∫–µ
function updateTotalReward() {
    const btnGetAllRewards = document.getElementById('btn-get-all-rewards');
    if (btnGetAllRewards) {
        const totalReward = calculateTotalReward();
        const rewardSpan = btnGetAllRewards.querySelector('div span');
        if (rewardSpan) {
            rewardSpan.textContent = `+${totalReward}`;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ, –Ω–æ –Ω–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        const hasCompletedTasks = totalReward !== '0';
        
        if (!hasCompletedTasks) {
            btnGetAllRewards.disabled = true;
            btnGetAllRewards.style.opacity = '0.5';
            btnGetAllRewards.style.cursor = 'not-allowed';
            btnGetAllRewards.style.background = '#333';
        } else {
            btnGetAllRewards.disabled = false;
            btnGetAllRewards.style.opacity = '1';
            btnGetAllRewards.style.cursor = 'pointer';
            btnGetAllRewards.style.background = '#5a5a5a';
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö (—É—Å—Ç–∞—Ä–µ–ª–∞)
function markCompletedTasksAsClaimed() {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
    console.log('markCompletedTasksAsClaimed is deprecated');
} 